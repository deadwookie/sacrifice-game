-- go.property("angular_velocity", 5)
-- go.property("linear_velocity", 200)
go.property("burst", 1)
go.property("burst_interval", 0.1)
go.property("fire_interval", 1.5)
go.property("wait_enemyspotted", false)

local function shoot(self)
	--print(self.burstFired)
	if not self.mayShoot then
		return
	end

	self.isShooting = true

	if self.burstFired < self.burst then
		self.didShot = true
		self.burstFired = self.burstFired + 1
	end

	if self.burstFired == self.burst then
		self.burstFired = 0
		timer.delay(self.fire_interval, false, shoot)
	elseif self.didShot then
		timer.delay(self.burst_interval, false, shoot)
	end
end

local function fire(self)
	local rotation = go.get_rotation()
	msg.post("#shot", "stop_sound")
	msg.post("#shot", "play_sound")
	msg.post("#fire", "enable")
	msg.post("#fire", "play_animation", {id = hash("fire")})
	msg.post("#soldier", "play_animation", {id = hash("fire_gun")})
	factory.create("#bulletfactory", go.get_position() + vmath.rotate(rotation, vmath.vector3(-3, -17, 0)), rotation)
end

function init(self)
	msg.post("#fire", "disable")
	self.didShot = false
	self.mayShoot = not self.wait_enemyspotted
	self.burstFired = 0
	shoot(self)
	--print(msg.url())
end

function final(self)
	self.mayShoot = false
end

function update(self, dt)
	if self.didShot then
		fire(self)
		self.didShot = false
	end
		
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enemyspotted") then
		self.mayShoot = true
		if not self.isShooting then
			shoot(self)
		end
	elseif message_id == hash("animation_done") then
		msg.post("#fire", "disable")
		msg.post("#soldier", "play_animation", {id = hash("idle_gun")})
	end
end
