go.property("spot", 0)
go.property("linear_velocity", 150)

local function get_spot_url(spot_ind)
	return msg.url("level_1", "/war/spots/spot_" .. spot_ind, hash("spot"))
end

function init(self)
	msg.post("#legs", "disable")
	self.moving = false
	self.alive = true
end

local function go_to(self, move_to_ind)
	if not self.alive then
		return
	end
	
	self.moving = true
	local pos = go.get_position()
	local targetPos = go.get_position(get_spot_url(move_to_ind))
	local t = vmath.length(targetPos - pos) / self.linear_velocity
	local angle = go.get(".", "euler.z")
	local targetAngle = (math.pi / 2 + math.atan2(targetPos.y - pos.y, targetPos.x - pos.x)) * 180 / math.pi

	msg.post("#legs", "enable")
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, targetPos, go.EASING_LINEAR, t, 0, function ()
		self.spot = move_to_ind
		self.moving = false
		msg.post("#legs", "disable")
	end)
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, targetAngle, go.EASING_INQUINT, t / 4, 0)
end

local function die(self, from)
	self.alive = false
	msg.post("#legs", "disable")
	msg.post("#collisionobject", "disable")
	msg.post("#death", "play_sound")

	-- where the corpse flies?
	local selfAngle = go.get(".", "euler.z")
	local bulletAngle = go.get(from, "euler.z")
	local angle = math.random(bulletAngle, selfAngle) - 90
	
	local x = math.cos(math.rad(angle))
	local y = math.sin(math.rad(angle))
	local targetPos = go.get_position()

	local shift = go.get(msg.url(nil, from, hash("script")), "killing_force") * 20
	targetPos.x = targetPos.x - x * shift
	targetPos.y = targetPos.y + y * shift

	local t = shift / self.linear_velocity
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, targetPos, go.EASING_LINEAR, t, 0)
	go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, angle - 90, go.EASING_INQUINT, t / 4, 0)
	
	sprite.play_flipbook("#head", "die", function (self, message_id) 
		print(message_id, 'HEADSHOT!')
		msg.post("/controller", "death")
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("move_to") and not self.moving then
		go_to(self, message["spot"])
	elseif message_id == hash("move_next") and not self.moving then
		go_to(self, go.get(get_spot_url(self.spot), "next_spot"))
	elseif message_id == hash("collision_response") and message.group == hash("bullet") then
		die(self, message.other_id)
	end
end
